// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelDers.Data.Concrete.EfCore.Context;

#nullable disable

namespace OzelDers.Data.Migrations
{
    [DbContext(typeof(OzelDersContext))]
    partial class OzelDersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "41bb57c4-67bf-4293-9925-94478bdf244d",
                            RoleId = "8a889228-b211-42fd-a343-775af104dee0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "41bb57c4-67bf-4293-9925-94478bdf244d"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 758, DateTimeKind.Local).AddTicks(8798),
                            IsApproved = true,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 758, DateTimeKind.Local).AddTicks(8810),
                            Name = "İlk Okul",
                            Url = "ilk-okul"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 758, DateTimeKind.Local).AddTicks(8813),
                            IsApproved = true,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 758, DateTimeKind.Local).AddTicks(8814),
                            Name = "Orta Okul",
                            Url = "orta-okul"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 758, DateTimeKind.Local).AddTicks(8815),
                            IsApproved = true,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 758, DateTimeKind.Local).AddTicks(8816),
                            Name = "Lise",
                            Url = "lise"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 758, DateTimeKind.Local).AddTicks(8817),
                            IsApproved = true,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 758, DateTimeKind.Local).AddTicks(8818),
                            Name = "Üniversite",
                            Url = "universite"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8a889228-b211-42fd-a343-775af104dee0",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "35993d49-d9c0-4b8e-8843-af44a1fc9eff",
                            Description = "Öğretmenler",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "c5d17273-aedc-4aa4-b512-1440b4d91ec7",
                            Description = "Öğrenciler",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("School")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Town")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "41bb57c4-67bf-4293-9925-94478bdf244d",
                            AccessFailedCount = 0,
                            City = "Beşiktaş",
                            ConcurrencyStamp = "53ba10a7-15bd-4742-8c46-242d5e8ba834",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1999, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ugurcan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Uğurcan",
                            Gender = "Erkek",
                            LastName = "Emare",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "UGURCAN@GMAIL.COM",
                            NormalizedUserName = "UGURCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAELt3SDLDo1Mf8s3yiPXKhr/FcmjxgiZOOHkpPQM8SFoRavL4HrkicW58cQkf2ZjbMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dd5618a-ede9-4b2d-9e61-f0226c4922cc",
                            Town = "İstanbul",
                            TwoFactorEnabled = false,
                            UserName = "ugurcan"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1532),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1536),
                            Name = "Matematik",
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1538),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1538),
                            Name = "Fizik",
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1540),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1541),
                            Name = "Kimya",
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1542),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1542),
                            Name = "Biyoloji",
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1544),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1544),
                            Name = "Hayat Bilgisi",
                            Url = "hayat-bilgisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1546),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1546),
                            Name = "Sosyal Bilgiler",
                            Url = "sosyal-bilgiler"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1547),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1548),
                            Name = "İnkılap Tarihi",
                            Url = "inkilap-tarihi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1549),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1550),
                            Name = "Felsefe",
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1551),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 760, DateTimeKind.Local).AddTicks(1552),
                            Name = "Din Kültürü ve Ahlak Bilgisi",
                            Url = "din-bilgisi-ve-ahlak-bilgisi"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.LessonCategory", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LessonId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("LessonCategories");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 1,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 4,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 6,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 7,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 8,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 9,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 9,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.LessonClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LessonClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9325),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9332),
                            Name = "1. Sınıf",
                            Url = "1-sınıf"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9334),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9335),
                            Name = "2. Sınıf",
                            Url = "2-sınıf"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9336),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9337),
                            Name = "3. Sınıf",
                            Url = "3-sınıf"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9338),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9339),
                            Name = "4. Sınıf",
                            Url = "4-sınıf"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9340),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9340),
                            Name = "5. Sınıf",
                            Url = "5-sınıf"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9342),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9342),
                            Name = "6. Sınıf",
                            Url = "6-sınıf"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9344),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9344),
                            Name = "7. Sınıf",
                            Url = "7-sınıf"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9345),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9346),
                            Name = "8. Sınıf",
                            Url = "8-sınıf"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9347),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9348),
                            Name = "9. Sınıf",
                            Url = "9-sınıf"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9349),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9350),
                            Name = "10. Sınıf",
                            Url = "10-sınıf"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9351),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9352),
                            Name = "11. Sınıf",
                            Url = "11-sınıf"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9353),
                            IsApproved = false,
                            ModifiedDate = new DateTime(2023, 5, 15, 0, 56, 42, 759, DateTimeKind.Local).AddTicks(9353),
                            Name = "12. Sınıf",
                            Url = "12-sınıf"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.LessonClassCategory", b =>
                {
                    b.Property<int>("LessonClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LessonClassId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("LessonClassCategories");

                    b.HasData(
                        new
                        {
                            LessonClassId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonClassId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonClassId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonClassId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonClassId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonClassId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonClassId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonClassId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonClassId = 9,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonClassId = 10,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonClassId = 11,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonClassId = 12,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LessonClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.StudentCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCategories");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.StudentClass", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LessonPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.TeacherCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCategories");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.TeacherLesson", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LessonId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherLessons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Image", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("OzelDers.Entity.Concrete.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.LessonCategory", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Category", "Category")
                        .WithMany("LessonCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Lesson", "Lesson")
                        .WithMany("LessonCategories")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.LessonClassCategory", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.LessonClass", "LessonClass")
                        .WithMany()
                        .HasForeignKey("LessonClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("LessonClass");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Order", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Student", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("OzelDers.Entity.Concrete.Student", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.StudentCategory", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Category", "Category")
                        .WithMany("StudentCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.StudentClass", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.LessonClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("OzelDers.Entity.Concrete.Teacher", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.TeacherCategory", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherCategory")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.TeacherLesson", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Lesson", "Lesson")
                        .WithMany("TeacherLesson")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherLesson")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Category", b =>
                {
                    b.Navigation("LessonCategories");

                    b.Navigation("StudentCategory");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Lesson", b =>
                {
                    b.Navigation("LessonCategories");

                    b.Navigation("TeacherLesson");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherCategory");

                    b.Navigation("TeacherLesson");
                });
#pragma warning restore 612, 618
        }
    }
}
